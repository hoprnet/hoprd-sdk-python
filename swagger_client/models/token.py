# coding: utf-8

"""
    HOPRd Rest API v3

    This Rest API enables developers to interact with a hoprd node programatically.  # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: tech@hoprnet.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Token(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'description': 'str',
        'valid_until': 'int',
        'capabilities': 'list[TokenCapability]'
    }

    attribute_map = {
        'id': 'id',
        'description': 'description',
        'valid_until': 'valid_until',
        'capabilities': 'capabilities'
    }

    def __init__(self, id=None, description=None, valid_until=None, capabilities=None):  # noqa: E501
        """Token - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._description = None
        self._valid_until = None
        self._capabilities = None
        self.discriminator = None
        self.id = id
        if description is not None:
            self.description = description
        if valid_until is not None:
            self.valid_until = valid_until
        self.capabilities = capabilities

    @property
    def id(self):
        """Gets the id of this Token.  # noqa: E501

        Unique ID of the token  # noqa: E501

        :return: The id of this Token.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Token.

        Unique ID of the token  # noqa: E501

        :param id: The id of this Token.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def description(self):
        """Gets the description of this Token.  # noqa: E501

        Some description for the token  # noqa: E501

        :return: The description of this Token.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Token.

        Some description for the token  # noqa: E501

        :param description: The description of this Token.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def valid_until(self):
        """Gets the valid_until of this Token.  # noqa: E501

        Seconds since epoch until the token is valid  # noqa: E501

        :return: The valid_until of this Token.  # noqa: E501
        :rtype: int
        """
        return self._valid_until

    @valid_until.setter
    def valid_until(self, valid_until):
        """Sets the valid_until of this Token.

        Seconds since epoch until the token is valid  # noqa: E501

        :param valid_until: The valid_until of this Token.  # noqa: E501
        :type: int
        """

        self._valid_until = valid_until

    @property
    def capabilities(self):
        """Gets the capabilities of this Token.  # noqa: E501

        Array of capabilities associated with the token  # noqa: E501

        :return: The capabilities of this Token.  # noqa: E501
        :rtype: list[TokenCapability]
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this Token.

        Array of capabilities associated with the token  # noqa: E501

        :param capabilities: The capabilities of this Token.  # noqa: E501
        :type: list[TokenCapability]
        """
        if capabilities is None:
            raise ValueError("Invalid value for `capabilities`, must not be `None`")  # noqa: E501

        self._capabilities = capabilities

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Token, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Token):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

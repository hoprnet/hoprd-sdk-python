# coding: utf-8

"""
    hoprd-api

    This Rest API enables developers to interact with a hoprd node programatically through HTTP.  # noqa: E501

    OpenAPI spec version: 3.2.0
    Contact: tech@hoprnet.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountBalancesResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hopr': 'str',
        'native': 'str',
        'safe_hopr': 'str',
        'safe_hopr_allowance': 'str',
        'safe_native': 'str'
    }

    attribute_map = {
        'hopr': 'hopr',
        'native': 'native',
        'safe_hopr': 'safeHopr',
        'safe_hopr_allowance': 'safeHoprAllowance',
        'safe_native': 'safeNative'
    }

    def __init__(self, hopr=None, native=None, safe_hopr=None, safe_hopr_allowance=None, safe_native=None):  # noqa: E501
        """AccountBalancesResponse - a model defined in Swagger"""  # noqa: E501
        self._hopr = None
        self._native = None
        self._safe_hopr = None
        self._safe_hopr_allowance = None
        self._safe_native = None
        self.discriminator = None
        self.hopr = hopr
        self.native = native
        self.safe_hopr = safe_hopr
        self.safe_hopr_allowance = safe_hopr_allowance
        self.safe_native = safe_native

    @property
    def hopr(self):
        """Gets the hopr of this AccountBalancesResponse.  # noqa: E501


        :return: The hopr of this AccountBalancesResponse.  # noqa: E501
        :rtype: str
        """
        return self._hopr

    @hopr.setter
    def hopr(self, hopr):
        """Sets the hopr of this AccountBalancesResponse.


        :param hopr: The hopr of this AccountBalancesResponse.  # noqa: E501
        :type: str
        """
        if hopr is None:
            raise ValueError("Invalid value for `hopr`, must not be `None`")  # noqa: E501

        self._hopr = hopr

    @property
    def native(self):
        """Gets the native of this AccountBalancesResponse.  # noqa: E501


        :return: The native of this AccountBalancesResponse.  # noqa: E501
        :rtype: str
        """
        return self._native

    @native.setter
    def native(self, native):
        """Sets the native of this AccountBalancesResponse.


        :param native: The native of this AccountBalancesResponse.  # noqa: E501
        :type: str
        """
        if native is None:
            raise ValueError("Invalid value for `native`, must not be `None`")  # noqa: E501

        self._native = native

    @property
    def safe_hopr(self):
        """Gets the safe_hopr of this AccountBalancesResponse.  # noqa: E501


        :return: The safe_hopr of this AccountBalancesResponse.  # noqa: E501
        :rtype: str
        """
        return self._safe_hopr

    @safe_hopr.setter
    def safe_hopr(self, safe_hopr):
        """Sets the safe_hopr of this AccountBalancesResponse.


        :param safe_hopr: The safe_hopr of this AccountBalancesResponse.  # noqa: E501
        :type: str
        """
        if safe_hopr is None:
            raise ValueError("Invalid value for `safe_hopr`, must not be `None`")  # noqa: E501

        self._safe_hopr = safe_hopr

    @property
    def safe_hopr_allowance(self):
        """Gets the safe_hopr_allowance of this AccountBalancesResponse.  # noqa: E501


        :return: The safe_hopr_allowance of this AccountBalancesResponse.  # noqa: E501
        :rtype: str
        """
        return self._safe_hopr_allowance

    @safe_hopr_allowance.setter
    def safe_hopr_allowance(self, safe_hopr_allowance):
        """Sets the safe_hopr_allowance of this AccountBalancesResponse.


        :param safe_hopr_allowance: The safe_hopr_allowance of this AccountBalancesResponse.  # noqa: E501
        :type: str
        """
        if safe_hopr_allowance is None:
            raise ValueError("Invalid value for `safe_hopr_allowance`, must not be `None`")  # noqa: E501

        self._safe_hopr_allowance = safe_hopr_allowance

    @property
    def safe_native(self):
        """Gets the safe_native of this AccountBalancesResponse.  # noqa: E501


        :return: The safe_native of this AccountBalancesResponse.  # noqa: E501
        :rtype: str
        """
        return self._safe_native

    @safe_native.setter
    def safe_native(self, safe_native):
        """Sets the safe_native of this AccountBalancesResponse.


        :param safe_native: The safe_native of this AccountBalancesResponse.  # noqa: E501
        :type: str
        """
        if safe_native is None:
            raise ValueError("Invalid value for `safe_native`, must not be `None`")  # noqa: E501

        self._safe_native = safe_native

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountBalancesResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountBalancesResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

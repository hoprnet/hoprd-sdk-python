# coding: utf-8

"""
    hoprd-api

    This Rest API enables developers to interact with a hoprd node programatically through HTTP.  # noqa: E501

    OpenAPI spec version: 3.10.0
    Contact: tech@hoprnet.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SessionClientRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'capabilities': 'list[SessionCapability]',
        'destination': 'str',
        'listen_host': 'str',
        'path': 'RoutingOptions',
        'target': 'SessionTargetSpec'
    }

    attribute_map = {
        'capabilities': 'capabilities',
        'destination': 'destination',
        'listen_host': 'listenHost',
        'path': 'path',
        'target': 'target'
    }

    def __init__(self, capabilities=None, destination=None, listen_host=None, path=None, target=None):  # noqa: E501
        """SessionClientRequest - a model defined in Swagger"""  # noqa: E501
        self._capabilities = None
        self._destination = None
        self._listen_host = None
        self._path = None
        self._target = None
        self.discriminator = None
        if capabilities is not None:
            self.capabilities = capabilities
        self.destination = destination
        if listen_host is not None:
            self.listen_host = listen_host
        self.path = path
        self.target = target

    @property
    def capabilities(self):
        """Gets the capabilities of this SessionClientRequest.  # noqa: E501

        Capabilities for the Session protocol.  Defaults to `Segmentation` and `Retransmission` for TCP and nothing for UDP.  # noqa: E501

        :return: The capabilities of this SessionClientRequest.  # noqa: E501
        :rtype: list[SessionCapability]
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this SessionClientRequest.

        Capabilities for the Session protocol.  Defaults to `Segmentation` and `Retransmission` for TCP and nothing for UDP.  # noqa: E501

        :param capabilities: The capabilities of this SessionClientRequest.  # noqa: E501
        :type: list[SessionCapability]
        """

        self._capabilities = capabilities

    @property
    def destination(self):
        """Gets the destination of this SessionClientRequest.  # noqa: E501

        Peer ID of the Exit node.  # noqa: E501

        :return: The destination of this SessionClientRequest.  # noqa: E501
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this SessionClientRequest.

        Peer ID of the Exit node.  # noqa: E501

        :param destination: The destination of this SessionClientRequest.  # noqa: E501
        :type: str
        """
        if destination is None:
            raise ValueError("Invalid value for `destination`, must not be `None`")  # noqa: E501

        self._destination = destination

    @property
    def listen_host(self):
        """Gets the listen_host of this SessionClientRequest.  # noqa: E501

        Listen host (`ip:port`) for the Session socket at the Entry node.  Supports also partial specification (only `ip` or only `:port`) with the respective part replaced by the node's configured default.  # noqa: E501

        :return: The listen_host of this SessionClientRequest.  # noqa: E501
        :rtype: str
        """
        return self._listen_host

    @listen_host.setter
    def listen_host(self, listen_host):
        """Sets the listen_host of this SessionClientRequest.

        Listen host (`ip:port`) for the Session socket at the Entry node.  Supports also partial specification (only `ip` or only `:port`) with the respective part replaced by the node's configured default.  # noqa: E501

        :param listen_host: The listen_host of this SessionClientRequest.  # noqa: E501
        :type: str
        """

        self._listen_host = listen_host

    @property
    def path(self):
        """Gets the path of this SessionClientRequest.  # noqa: E501


        :return: The path of this SessionClientRequest.  # noqa: E501
        :rtype: RoutingOptions
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this SessionClientRequest.


        :param path: The path of this SessionClientRequest.  # noqa: E501
        :type: RoutingOptions
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def target(self):
        """Gets the target of this SessionClientRequest.  # noqa: E501


        :return: The target of this SessionClientRequest.  # noqa: E501
        :rtype: SessionTargetSpec
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this SessionClientRequest.


        :param target: The target of this SessionClientRequest.  # noqa: E501
        :type: SessionTargetSpec
        """
        if target is None:
            raise ValueError("Invalid value for `target`, must not be `None`")  # noqa: E501

        self._target = target

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SessionClientRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SessionClientRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

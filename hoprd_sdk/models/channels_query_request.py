# coding: utf-8

"""
    hoprd-api

    API server using the hopr-lib created HOPR node and exposing it using a HTTP REST API  # noqa: E501

    OpenAPI spec version: 0.2.1
    Contact: tech@hoprnet.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ChannelsQueryRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'full_topology': 'bool',
        'including_closed': 'bool'
    }

    attribute_map = {
        'full_topology': 'fullTopology',
        'including_closed': 'includingClosed'
    }

    def __init__(self, full_topology=False, including_closed=False):  # noqa: E501
        """ChannelsQueryRequest - a model defined in Swagger"""  # noqa: E501
        self._full_topology = None
        self._including_closed = None
        self.discriminator = None
        if full_topology is not None:
            self.full_topology = full_topology
        if including_closed is not None:
            self.including_closed = including_closed

    @property
    def full_topology(self):
        """Gets the full_topology of this ChannelsQueryRequest.  # noqa: E501

        Should all channels (not only the ones concerning this node) be enumerated?  # noqa: E501

        :return: The full_topology of this ChannelsQueryRequest.  # noqa: E501
        :rtype: bool
        """
        return self._full_topology

    @full_topology.setter
    def full_topology(self, full_topology):
        """Sets the full_topology of this ChannelsQueryRequest.

        Should all channels (not only the ones concerning this node) be enumerated?  # noqa: E501

        :param full_topology: The full_topology of this ChannelsQueryRequest.  # noqa: E501
        :type: bool
        """

        self._full_topology = full_topology

    @property
    def including_closed(self):
        """Gets the including_closed of this ChannelsQueryRequest.  # noqa: E501

        Should be the closed channels included?  # noqa: E501

        :return: The including_closed of this ChannelsQueryRequest.  # noqa: E501
        :rtype: bool
        """
        return self._including_closed

    @including_closed.setter
    def including_closed(self, including_closed):
        """Sets the including_closed of this ChannelsQueryRequest.

        Should be the closed channels included?  # noqa: E501

        :param including_closed: The including_closed of this ChannelsQueryRequest.  # noqa: E501
        :type: bool
        """

        self._including_closed = including_closed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChannelsQueryRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChannelsQueryRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

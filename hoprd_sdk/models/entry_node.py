# coding: utf-8

"""
    hoprd-api

    This Rest API enables developers to interact with a hoprd node programatically through HTTP.  # noqa: E501

    OpenAPI spec version: 3.1.1
    Contact: tech@hoprnet.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EntryNode(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_eligible': 'bool',
        'multiaddrs': 'list[str]'
    }

    attribute_map = {
        'is_eligible': 'isEligible',
        'multiaddrs': 'multiaddrs'
    }

    def __init__(self, is_eligible=None, multiaddrs=None):  # noqa: E501
        """EntryNode - a model defined in Swagger"""  # noqa: E501
        self._is_eligible = None
        self._multiaddrs = None
        self.discriminator = None
        self.is_eligible = is_eligible
        self.multiaddrs = multiaddrs

    @property
    def is_eligible(self):
        """Gets the is_eligible of this EntryNode.  # noqa: E501


        :return: The is_eligible of this EntryNode.  # noqa: E501
        :rtype: bool
        """
        return self._is_eligible

    @is_eligible.setter
    def is_eligible(self, is_eligible):
        """Sets the is_eligible of this EntryNode.


        :param is_eligible: The is_eligible of this EntryNode.  # noqa: E501
        :type: bool
        """
        if is_eligible is None:
            raise ValueError("Invalid value for `is_eligible`, must not be `None`")  # noqa: E501

        self._is_eligible = is_eligible

    @property
    def multiaddrs(self):
        """Gets the multiaddrs of this EntryNode.  # noqa: E501


        :return: The multiaddrs of this EntryNode.  # noqa: E501
        :rtype: list[str]
        """
        return self._multiaddrs

    @multiaddrs.setter
    def multiaddrs(self, multiaddrs):
        """Sets the multiaddrs of this EntryNode.


        :param multiaddrs: The multiaddrs of this EntryNode.  # noqa: E501
        :type: list[str]
        """
        if multiaddrs is None:
            raise ValueError("Invalid value for `multiaddrs`, must not be `None`")  # noqa: E501

        self._multiaddrs = multiaddrs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EntryNode, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntryNode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

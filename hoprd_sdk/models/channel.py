# coding: utf-8

"""
    HOPRd Rest API v3

    This Rest API enables developers to interact with a hoprd node programatically.  # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: tech@hoprnet.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Channel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'id': 'ChannelId',
        'peer_id': 'HoprAddress',
        'status': 'ChannelStatus',
        'balance': 'HoprBalance'
    }

    attribute_map = {
        'type': 'type',
        'id': 'id',
        'peer_id': 'peerId',
        'status': 'status',
        'balance': 'balance'
    }

    def __init__(self, type=None, id=None, peer_id=None, status=None, balance=None):  # noqa: E501
        """Channel - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._id = None
        self._peer_id = None
        self._status = None
        self._balance = None
        self.discriminator = None
        if type is not None:
            self.type = type
        if id is not None:
            self.id = id
        if peer_id is not None:
            self.peer_id = peer_id
        if status is not None:
            self.status = status
        if balance is not None:
            self.balance = balance

    @property
    def type(self):
        """Gets the type of this Channel.  # noqa: E501

        Channel can be either incomming or outgoing. Incomming means that other node can send messages using this node as relay. Outgoing means that this node can use other node to send message as realy.  # noqa: E501

        :return: The type of this Channel.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Channel.

        Channel can be either incomming or outgoing. Incomming means that other node can send messages using this node as relay. Outgoing means that this node can use other node to send message as realy.  # noqa: E501

        :param type: The type of this Channel.  # noqa: E501
        :type: str
        """
        allowed_values = ["incoming", "outgoing"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def id(self):
        """Gets the id of this Channel.  # noqa: E501


        :return: The id of this Channel.  # noqa: E501
        :rtype: ChannelId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Channel.


        :param id: The id of this Channel.  # noqa: E501
        :type: ChannelId
        """

        self._id = id

    @property
    def peer_id(self):
        """Gets the peer_id of this Channel.  # noqa: E501


        :return: The peer_id of this Channel.  # noqa: E501
        :rtype: HoprAddress
        """
        return self._peer_id

    @peer_id.setter
    def peer_id(self, peer_id):
        """Sets the peer_id of this Channel.


        :param peer_id: The peer_id of this Channel.  # noqa: E501
        :type: HoprAddress
        """

        self._peer_id = peer_id

    @property
    def status(self):
        """Gets the status of this Channel.  # noqa: E501


        :return: The status of this Channel.  # noqa: E501
        :rtype: ChannelStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Channel.


        :param status: The status of this Channel.  # noqa: E501
        :type: ChannelStatus
        """

        self._status = status

    @property
    def balance(self):
        """Gets the balance of this Channel.  # noqa: E501


        :return: The balance of this Channel.  # noqa: E501
        :rtype: HoprBalance
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this Channel.


        :param balance: The balance of this Channel.  # noqa: E501
        :type: HoprBalance
        """

        self._balance = balance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Channel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Channel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

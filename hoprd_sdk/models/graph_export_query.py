# coding: utf-8

"""
    hoprd-api

    This Rest API enables developers to interact with a hoprd node programatically through HTTP.  # noqa: E501

    OpenAPI spec version: 3.10.0
    Contact: tech@hoprnet.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GraphExportQuery(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ignore_disconnected_components': 'bool',
        'ignore_non_opened_channels': 'bool',
        'raw_graph': 'bool'
    }

    attribute_map = {
        'ignore_disconnected_components': 'ignoreDisconnectedComponents',
        'ignore_non_opened_channels': 'ignoreNonOpenedChannels',
        'raw_graph': 'rawGraph'
    }

    def __init__(self, ignore_disconnected_components=False, ignore_non_opened_channels=False, raw_graph=False):  # noqa: E501
        """GraphExportQuery - a model defined in Swagger"""  # noqa: E501
        self._ignore_disconnected_components = None
        self._ignore_non_opened_channels = None
        self._raw_graph = None
        self.discriminator = None
        if ignore_disconnected_components is not None:
            self.ignore_disconnected_components = ignore_disconnected_components
        if ignore_non_opened_channels is not None:
            self.ignore_non_opened_channels = ignore_non_opened_channels
        if raw_graph is not None:
            self.raw_graph = raw_graph

    @property
    def ignore_disconnected_components(self):
        """Gets the ignore_disconnected_components of this GraphExportQuery.  # noqa: E501

        If set, nodes that are not connected to this node (via open channels) will not be exported. This setting automatically implies `ignore_non_opened_channels`.  # noqa: E501

        :return: The ignore_disconnected_components of this GraphExportQuery.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_disconnected_components

    @ignore_disconnected_components.setter
    def ignore_disconnected_components(self, ignore_disconnected_components):
        """Sets the ignore_disconnected_components of this GraphExportQuery.

        If set, nodes that are not connected to this node (via open channels) will not be exported. This setting automatically implies `ignore_non_opened_channels`.  # noqa: E501

        :param ignore_disconnected_components: The ignore_disconnected_components of this GraphExportQuery.  # noqa: E501
        :type: bool
        """

        self._ignore_disconnected_components = ignore_disconnected_components

    @property
    def ignore_non_opened_channels(self):
        """Gets the ignore_non_opened_channels of this GraphExportQuery.  # noqa: E501

        Do not export channels that are not in the `Open` state.  # noqa: E501

        :return: The ignore_non_opened_channels of this GraphExportQuery.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_non_opened_channels

    @ignore_non_opened_channels.setter
    def ignore_non_opened_channels(self, ignore_non_opened_channels):
        """Sets the ignore_non_opened_channels of this GraphExportQuery.

        Do not export channels that are not in the `Open` state.  # noqa: E501

        :param ignore_non_opened_channels: The ignore_non_opened_channels of this GraphExportQuery.  # noqa: E501
        :type: bool
        """

        self._ignore_non_opened_channels = ignore_non_opened_channels

    @property
    def raw_graph(self):
        """Gets the raw_graph of this GraphExportQuery.  # noqa: E501

        Export the entire graph in raw JSON format, that can be later used to load the graph into e.g. a unit test.  Note that `ignore_disconnected_components` and `ignore_non_opened_channels` are ignored.  # noqa: E501

        :return: The raw_graph of this GraphExportQuery.  # noqa: E501
        :rtype: bool
        """
        return self._raw_graph

    @raw_graph.setter
    def raw_graph(self, raw_graph):
        """Sets the raw_graph of this GraphExportQuery.

        Export the entire graph in raw JSON format, that can be later used to load the graph into e.g. a unit test.  Note that `ignore_disconnected_components` and `ignore_non_opened_channels` are ignored.  # noqa: E501

        :param raw_graph: The raw_graph of this GraphExportQuery.  # noqa: E501
        :type: bool
        """

        self._raw_graph = raw_graph

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GraphExportQuery, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GraphExportQuery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    hoprd-api

    This Rest API enables developers to interact with a hoprd node programatically through HTTP.  # noqa: E501

    OpenAPI spec version: 3.1.1
    Contact: tech@hoprnet.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NodeChannelsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'all': 'list[ChannelInfoResponse]',
        'incoming': 'list[NodeChannel]',
        'outgoing': 'list[NodeChannel]'
    }

    attribute_map = {
        'all': 'all',
        'incoming': 'incoming',
        'outgoing': 'outgoing'
    }

    def __init__(self, all=None, incoming=None, outgoing=None):  # noqa: E501
        """NodeChannelsResponse - a model defined in Swagger"""  # noqa: E501
        self._all = None
        self._incoming = None
        self._outgoing = None
        self.discriminator = None
        self.all = all
        self.incoming = incoming
        self.outgoing = outgoing

    @property
    def all(self):
        """Gets the all of this NodeChannelsResponse.  # noqa: E501

        Complete channel topology as seen by this node.  # noqa: E501

        :return: The all of this NodeChannelsResponse.  # noqa: E501
        :rtype: list[ChannelInfoResponse]
        """
        return self._all

    @all.setter
    def all(self, all):
        """Sets the all of this NodeChannelsResponse.

        Complete channel topology as seen by this node.  # noqa: E501

        :param all: The all of this NodeChannelsResponse.  # noqa: E501
        :type: list[ChannelInfoResponse]
        """
        if all is None:
            raise ValueError("Invalid value for `all`, must not be `None`")  # noqa: E501

        self._all = all

    @property
    def incoming(self):
        """Gets the incoming of this NodeChannelsResponse.  # noqa: E501

        Channels incoming to this node.  # noqa: E501

        :return: The incoming of this NodeChannelsResponse.  # noqa: E501
        :rtype: list[NodeChannel]
        """
        return self._incoming

    @incoming.setter
    def incoming(self, incoming):
        """Sets the incoming of this NodeChannelsResponse.

        Channels incoming to this node.  # noqa: E501

        :param incoming: The incoming of this NodeChannelsResponse.  # noqa: E501
        :type: list[NodeChannel]
        """
        if incoming is None:
            raise ValueError("Invalid value for `incoming`, must not be `None`")  # noqa: E501

        self._incoming = incoming

    @property
    def outgoing(self):
        """Gets the outgoing of this NodeChannelsResponse.  # noqa: E501

        Channels outgoing from this node.  # noqa: E501

        :return: The outgoing of this NodeChannelsResponse.  # noqa: E501
        :rtype: list[NodeChannel]
        """
        return self._outgoing

    @outgoing.setter
    def outgoing(self, outgoing):
        """Sets the outgoing of this NodeChannelsResponse.

        Channels outgoing from this node.  # noqa: E501

        :param outgoing: The outgoing of this NodeChannelsResponse.  # noqa: E501
        :type: list[NodeChannel]
        """
        if outgoing is None:
            raise ValueError("Invalid value for `outgoing`, must not be `None`")  # noqa: E501

        self._outgoing = outgoing

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NodeChannelsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NodeChannelsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
